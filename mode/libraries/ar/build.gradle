import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;

apply plugin: 'maven'
apply plugin: 'aar'


dependencies {
    compileOnly name: "android"

    compileOnly "org.p5android:processing-core:${modeVersion}"

    implementationAar "com.google.ar:core:${garVersion}"
}

task createPom {
    pom {
       project {
           groupId "org.p5android"
           artifactId "processing-ar"
           version "${arLibVersion}"
           packaging "jar"
           licenses {
               license {
                   name "GNU Lesser General Public License, version 2.1"
                   url "https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt"
                   distribution "repo"
               }
           }
           dependencies {
               dependency {
                   groupId "org.p5android"
                   artifactId "processing-core"
                   version "${modeVersion}"
                   scope "implementation"
               }

               dependency {
                   groupId "com.google.ar"
                   artifactId "core"
                   version "${garVersion}"
                   scope "implementation"
               }            
           }
        }
    }.writeTo("dist/processing-ar-${arLibVersion}.pom")
}

sourceSets {
    main {
        java {
            srcDirs = ["src/"]
        }
        resources {
            srcDirs = ["src/"]
        }        
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

// Does not work because of Processing-specific tags in source code, such as @webref
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

artifacts {
//     archives javadocJar
    archives sourcesJar
}

jar.doLast { task ->
    ant.checksum file: task.archivePath
}

clean.doFirst {
    delete "dist"
    delete "library/ar.jar"
}

compileJava.doFirst {
    String[] deps = ["core.jar"]
    File libFolder = file("library")
    libFolder.mkdirs()
    for (String fn : deps) {
        Files.copy(file("${rootDir}/build/libs/" + fn).toPath(),
                   file("library/" + fn).toPath(), REPLACE_EXISTING);
    }
}

build.doLast {
    // Copying ar jar to library folder
    File arJar = file("library/ar.jar")
    arJar.mkdirs();
    Files.copy(file("$buildDir/libs/ar.jar").toPath(),
               arJar.toPath(), REPLACE_EXISTING);   

    // // Copying the files for release on JCentral
    File distFolder = file("dist");
    distFolder.mkdirs();
    Files.copy(file("$buildDir/libs/ar.jar").toPath(),
               file("dist/processing-ar-${arLibVersion}.jar").toPath(), REPLACE_EXISTING);
    Files.copy(file("$buildDir/libs/ar-sources.jar").toPath(),
               file("dist/processing-ar-${arLibVersion}-sources.jar").toPath(), REPLACE_EXISTING);
    Files.copy(file("$buildDir/libs/ar.jar.MD5").toPath(),
               file("dist/processing-ar-${arLibVersion}.jar.md5").toPath(), REPLACE_EXISTING);
}